security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User: 'auto'
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    providers:
#        users_in_memory: { memory: null }
        
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            # lazy: true
            # provider: users_in_memory
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /api/authentication_token
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    
        - { path: ^/api/docs, roles: PUBLIC_ACCESS }
        - { path: ^/api/ui, roles: PUBLIC_ACCESS }
        - { path: ^/api/authentication_token, roles: PUBLIC_ACCESS }
#        - { path: ^/api/categories , roles: PUBLIC_ACCESS } # @TODO remove when front sends token
#        - { path: ^/api/players , roles: PUBLIC_ACCESS } # @TODO remove when front sends token
#        - { path: ^/api/games , roles: PUBLIC_ACCESS } # @TODO remove when front sends token
#        - { path: ^/api/users , roles: PUBLIC_ACCESS } # @TODO remove when front sends token
        - { path: ^/api/users , roles: PUBLIC_ACCESS, method: POST }
#        - { path: ^/api/words , roles: IS_AUTHENTICATED_FULLY }
#        - { path: ^/api/categories, roles: IS_AUTHENTICATED_FULLY }
#        - { path: ^/api/users , roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/, roles: ROLE_ADMIN }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
